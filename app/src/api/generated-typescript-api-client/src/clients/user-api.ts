/* tslint:disable */
/* eslint-disable */
/**
 * Kangaroo Server
 * In order to interact with the API from this documentation alone follow the following steps: 1. Register at the register route. 2. Login using the credentials at the login route. 3. Get the `access_token` from the response and enter it in the Authorization formk. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { StickerPackRo } from '../models';
// @ts-ignore
import { UserPrivateRo } from '../models';
// @ts-ignore
import { UserPublicRo } from '../models';
/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all joined sticker packs of logged in user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJoinedStickerPacks: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/me/sticker-packs/joined`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all owned and joined sticker packs of logged in user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOwnAndJoinedStickerPacks: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/me/sticker-packs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get private profile of currently logged in user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOwnPrivateProfile: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all owned sticker packs of logged in user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOwnStickerPacks: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/me/sticker-packs/owned`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get public profile of someone else.
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicProfile: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getPublicProfile', 'userId', userId)
            const localVarPath = `/api/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all joined sticker packs of logged in user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJoinedStickerPacks(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StickerPackRo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJoinedStickerPacks(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all owned and joined sticker packs of logged in user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOwnAndJoinedStickerPacks(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StickerPackRo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOwnAndJoinedStickerPacks(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get private profile of currently logged in user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOwnPrivateProfile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPrivateRo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOwnPrivateProfile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all owned sticker packs of logged in user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOwnStickerPacks(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StickerPackRo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOwnStickerPacks(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get public profile of someone else.
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicProfile(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPublicRo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPublicProfile(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all joined sticker packs of logged in user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJoinedStickerPacks(options?: any): AxiosPromise<Array<StickerPackRo>> {
            return localVarFp.getJoinedStickerPacks(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all owned and joined sticker packs of logged in user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOwnAndJoinedStickerPacks(options?: any): AxiosPromise<Array<StickerPackRo>> {
            return localVarFp.getOwnAndJoinedStickerPacks(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get private profile of currently logged in user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOwnPrivateProfile(options?: any): AxiosPromise<UserPrivateRo> {
            return localVarFp.getOwnPrivateProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all owned sticker packs of logged in user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOwnStickerPacks(options?: any): AxiosPromise<Array<StickerPackRo>> {
            return localVarFp.getOwnStickerPacks(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get public profile of someone else.
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicProfile(userId: string, options?: any): AxiosPromise<UserPublicRo> {
            return localVarFp.getPublicProfile(userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary Get all joined sticker packs of logged in user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getJoinedStickerPacks(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getJoinedStickerPacks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all owned and joined sticker packs of logged in user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getOwnAndJoinedStickerPacks(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getOwnAndJoinedStickerPacks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get private profile of currently logged in user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getOwnPrivateProfile(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getOwnPrivateProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all owned sticker packs of logged in user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getOwnStickerPacks(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getOwnStickerPacks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get public profile of someone else.
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getPublicProfile(userId: string, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getPublicProfile(userId, options).then((request) => request(this.axios, this.basePath));
    }
}
