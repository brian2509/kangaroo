/* tslint:disable */
/* eslint-disable */
/**
 * Giraffe Server
 * In order to interact with the API from this documentation alone follow the following steps: 1. Register at the register route. 2. Login using the credentials at the login route. 3. Get the `access_token` from the response and enter it in the Authorization formk. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateStickerDto } from '../models';
// @ts-ignore
import { CreateStickerPackDto } from '../models';
// @ts-ignore
import { StickerPackRo } from '../models';
// @ts-ignore
import { StickerRo } from '../models';
/**
 * StickerPacksApi - axios parameter creator
 * @export
 */
export const StickerPacksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a sticker to a sticker pack you own or a member of. The file must be less than 3MB and be of type /jpeg|jpg|png|gif/.
         * @param {string} id 
         * @param {CreateStickerDto} createStickerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSticker: async (id: string, createStickerDto: CreateStickerDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addSticker', 'id', id)
            // verify required parameter 'createStickerDto' is not null or undefined
            assertParamExists('addSticker', 'createStickerDto', createStickerDto)
            const localVarPath = `/api/sticker-packs/{id}/stickers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createStickerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a sticker pack (without stickers).
         * @param {CreateStickerPackDto} createStickerPackDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (createStickerPackDto: CreateStickerPackDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createStickerPackDto' is not null or undefined
            assertParamExists('create', 'createStickerPackDto', createStickerPackDto)
            const localVarPath = `/api/sticker-packs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createStickerPackDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a sticker to a sticker pack you own or a member of.
         * @param {string} id 
         * @param {string} stickerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSticker: async (id: string, stickerId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteSticker', 'id', id)
            // verify required parameter 'stickerId' is not null or undefined
            assertParamExists('deleteSticker', 'stickerId', stickerId)
            const localVarPath = `/api/sticker-packs/{id}/stickers/{stickerId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"stickerId"}}`, encodeURIComponent(String(stickerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of all sticker packs which are public.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllPublicPacks: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/sticker-packs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a sticker pick which is public or which you own or which you are a member of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOne: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('findOne', 'id', id)
            const localVarPath = `/api/sticker-packs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Join a sticker pack which is public.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinStickerPack: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('joinStickerPack', 'id', id)
            const localVarPath = `/api/sticker-packs/{id}/actions/join`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Leave a sticker pack which you are a member of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaveStickerPack: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('leaveStickerPack', 'id', id)
            const localVarPath = `/api/sticker-packs/{id}/actions/leave`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register a like for a sticker pack.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        likeStickerPack: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('likeStickerPack', 'id', id)
            const localVarPath = `/api/sticker-packs/{id}/actions/like`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register a click for a sticker pack.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerLike: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('registerLike', 'id', id)
            const localVarPath = `/api/sticker-packs/{id}/actions/registerClick`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register a view for a sticker pack.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerView: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('registerView', 'id', id)
            const localVarPath = `/api/sticker-packs/{id}/actions/registerView`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a sticker pack.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('remove', 'id', id)
            const localVarPath = `/api/sticker-packs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register a unlike for a sticker pack.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlikeStickerPack: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('unlikeStickerPack', 'id', id)
            const localVarPath = `/api/sticker-packs/{id}/actions/unlike`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a sticker pack.
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (id: string, body: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('update', 'body', body)
            const localVarPath = `/api/sticker-packs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StickerPacksApi - functional programming interface
 * @export
 */
export const StickerPacksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StickerPacksApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a sticker to a sticker pack you own or a member of. The file must be less than 3MB and be of type /jpeg|jpg|png|gif/.
         * @param {string} id 
         * @param {CreateStickerDto} createStickerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSticker(id: string, createStickerDto: CreateStickerDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StickerRo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSticker(id, createStickerDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a sticker pack (without stickers).
         * @param {CreateStickerPackDto} createStickerPackDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(createStickerPackDto: CreateStickerPackDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StickerPackRo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(createStickerPackDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Remove a sticker to a sticker pack you own or a member of.
         * @param {string} id 
         * @param {string} stickerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSticker(id: string, stickerId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StickerRo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSticker(id, stickerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of all sticker packs which are public.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAllPublicPacks(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StickerPackRo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAllPublicPacks(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a sticker pick which is public or which you own or which you are a member of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findOne(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StickerPackRo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Join a sticker pack which is public.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async joinStickerPack(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StickerPackRo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.joinStickerPack(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Leave a sticker pack which you are a member of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leaveStickerPack(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StickerPackRo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.leaveStickerPack(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Register a like for a sticker pack.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async likeStickerPack(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.likeStickerPack(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Register a click for a sticker pack.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerLike(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerLike(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Register a view for a sticker pack.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerView(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerView(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a sticker pack.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async remove(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StickerPackRo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.remove(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Register a unlike for a sticker pack.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unlikeStickerPack(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unlikeStickerPack(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a sticker pack.
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(id: string, body: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StickerPackRo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StickerPacksApi - factory interface
 * @export
 */
export const StickerPacksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StickerPacksApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a sticker to a sticker pack you own or a member of. The file must be less than 3MB and be of type /jpeg|jpg|png|gif/.
         * @param {string} id 
         * @param {CreateStickerDto} createStickerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSticker(id: string, createStickerDto: CreateStickerDto, options?: any): AxiosPromise<StickerRo> {
            return localVarFp.addSticker(id, createStickerDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a sticker pack (without stickers).
         * @param {CreateStickerPackDto} createStickerPackDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(createStickerPackDto: CreateStickerPackDto, options?: any): AxiosPromise<StickerPackRo> {
            return localVarFp.create(createStickerPackDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove a sticker to a sticker pack you own or a member of.
         * @param {string} id 
         * @param {string} stickerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSticker(id: string, stickerId: string, options?: any): AxiosPromise<StickerRo> {
            return localVarFp.deleteSticker(id, stickerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of all sticker packs which are public.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllPublicPacks(options?: any): AxiosPromise<Array<StickerPackRo>> {
            return localVarFp.findAllPublicPacks(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a sticker pick which is public or which you own or which you are a member of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findOne(id: string, options?: any): AxiosPromise<StickerPackRo> {
            return localVarFp.findOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Join a sticker pack which is public.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinStickerPack(id: string, options?: any): AxiosPromise<StickerPackRo> {
            return localVarFp.joinStickerPack(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Leave a sticker pack which you are a member of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaveStickerPack(id: string, options?: any): AxiosPromise<StickerPackRo> {
            return localVarFp.leaveStickerPack(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register a like for a sticker pack.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        likeStickerPack(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.likeStickerPack(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register a click for a sticker pack.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerLike(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.registerLike(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register a view for a sticker pack.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerView(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.registerView(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a sticker pack.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        remove(id: string, options?: any): AxiosPromise<StickerPackRo> {
            return localVarFp.remove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register a unlike for a sticker pack.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlikeStickerPack(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.unlikeStickerPack(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a sticker pack.
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(id: string, body: object, options?: any): AxiosPromise<StickerPackRo> {
            return localVarFp.update(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StickerPacksApi - object-oriented interface
 * @export
 * @class StickerPacksApi
 * @extends {BaseAPI}
 */
export class StickerPacksApi extends BaseAPI {
    /**
     * 
     * @summary Add a sticker to a sticker pack you own or a member of. The file must be less than 3MB and be of type /jpeg|jpg|png|gif/.
     * @param {string} id 
     * @param {CreateStickerDto} createStickerDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StickerPacksApi
     */
    public addSticker(id: string, createStickerDto: CreateStickerDto, options?: any) {
        return StickerPacksApiFp(this.configuration).addSticker(id, createStickerDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a sticker pack (without stickers).
     * @param {CreateStickerPackDto} createStickerPackDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StickerPacksApi
     */
    public create(createStickerPackDto: CreateStickerPackDto, options?: any) {
        return StickerPacksApiFp(this.configuration).create(createStickerPackDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove a sticker to a sticker pack you own or a member of.
     * @param {string} id 
     * @param {string} stickerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StickerPacksApi
     */
    public deleteSticker(id: string, stickerId: string, options?: any) {
        return StickerPacksApiFp(this.configuration).deleteSticker(id, stickerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of all sticker packs which are public.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StickerPacksApi
     */
    public findAllPublicPacks(options?: any) {
        return StickerPacksApiFp(this.configuration).findAllPublicPacks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a sticker pick which is public or which you own or which you are a member of.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StickerPacksApi
     */
    public findOne(id: string, options?: any) {
        return StickerPacksApiFp(this.configuration).findOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Join a sticker pack which is public.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StickerPacksApi
     */
    public joinStickerPack(id: string, options?: any) {
        return StickerPacksApiFp(this.configuration).joinStickerPack(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Leave a sticker pack which you are a member of.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StickerPacksApi
     */
    public leaveStickerPack(id: string, options?: any) {
        return StickerPacksApiFp(this.configuration).leaveStickerPack(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register a like for a sticker pack.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StickerPacksApi
     */
    public likeStickerPack(id: string, options?: any) {
        return StickerPacksApiFp(this.configuration).likeStickerPack(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register a click for a sticker pack.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StickerPacksApi
     */
    public registerLike(id: string, options?: any) {
        return StickerPacksApiFp(this.configuration).registerLike(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register a view for a sticker pack.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StickerPacksApi
     */
    public registerView(id: string, options?: any) {
        return StickerPacksApiFp(this.configuration).registerView(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a sticker pack.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StickerPacksApi
     */
    public remove(id: string, options?: any) {
        return StickerPacksApiFp(this.configuration).remove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register a unlike for a sticker pack.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StickerPacksApi
     */
    public unlikeStickerPack(id: string, options?: any) {
        return StickerPacksApiFp(this.configuration).unlikeStickerPack(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a sticker pack.
     * @param {string} id 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StickerPacksApi
     */
    public update(id: string, body: object, options?: any) {
        return StickerPacksApiFp(this.configuration).update(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}
